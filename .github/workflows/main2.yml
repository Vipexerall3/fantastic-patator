name: CI
on: [push, workflow_dispatch]
jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: İndirme
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
    
    - name: Çıkartma
      run: Expand-Archive ngrok.zip
    
    - name: Kimlik Doğrulama ve Tünel Oluşturma
      run: |
        $tokenIndex = 1
        $success = $false
        
        while (-not $success) {
          $tokenName = if ($tokenIndex -eq 1) { "NGROK_AUTH_TOKEN" } else { "NGROK_AUTH_TOKEN_$tokenIndex" }
          $token = [Environment]::GetEnvironmentVariable($tokenName)
          
          if ($token) {
            Write-Host "Token #$tokenIndex ile deneniyor..."
            try {
              & .\ngrok\ngrok.exe authtoken $token 2>&1
              
              # TS ve RDP ayarlarını etkinleştir
              Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
              Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
              Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
              Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "VipexB!3" -Force)
              
              # Ngrok'u başlat ve endpoint'i yakala
              $ngrok = Start-Process .\ngrok\ngrok.exe -ArgumentList "tcp","3389" -PassThru -NoNewWindow -RedirectStandardOutput "ngrok.log"
              Start-Sleep -Seconds 10
              
              # Ngrok endpoint'ini API'den oku
              $api = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels"
              $endpoint = $api.tunnels[0].public_url -replace "tcp://", ""
              
              # Yeni environment file syntax'ı kullanarak endpoint'i kaydet
              "endpoint=$endpoint" >> $env:GITHUB_OUTPUT
              
              # Tüneli açık tut
              while ($true) {
                if ($ngrok.HasExited) {
                  Write-Host "Ngrok sonlandı, yeniden başlatılıyor..."
                  $ngrok = Start-Process .\ngrok\ngrok.exe -ArgumentList "tcp","3389" -PassThru -NoNewWindow
                }
                Start-Sleep -Seconds 10
              }
              
              $success = $true
              
            } catch {
              Write-Host "Token #$tokenIndex şu hatayla başarısız oldu: $_"
              Write-Host "Sonraki token deneniyor..."
              $tokenIndex++
            }
          } else {
            Write-Host "Token #$tokenName bulunamadı, çıkılıyor..."
            exit 1
          }
        }
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        NGROK_AUTH_TOKEN_2: ${{ secrets.NGROK_AUTH_TOKEN_2 }}
        NGROK_AUTH_TOKEN_3: ${{ secrets.NGROK_AUTH_TOKEN_3 }}
        NGROK_AUTH_TOKEN_4: ${{ secrets.NGROK_AUTH_TOKEN_4 }}
        NGROK_AUTH_TOKEN_5: ${{ secrets.NGROK_AUTH_TOKEN_5 }}
        NGROK_AUTH_TOKEN_6: ${{ secrets.NGROK_AUTH_TOKEN_6 }}
        NGROK_AUTH_TOKEN_7: ${{ secrets.NGROK_AUTH_TOKEN_7 }}
        NGROK_AUTH_TOKEN_8: ${{ secrets.NGROK_AUTH_TOKEN_8 }}
        NGROK_AUTH_TOKEN_9: ${{ secrets.NGROK_AUTH_TOKEN_9 }}
        NGROK_AUTH_TOKEN_10: ${{ secrets.NGROK_AUTH_TOKEN_10 }}

    - name: VDS Bilgilerini Görüntüle
      run: |
        Write-Host "🌟 VDS BAĞLANTI BİLGİLERİ 🌟"
        Write-Host "==============================="
        Write-Host "👤 Kullanıcı Adı: runneradmin"
        Write-Host "🔑 Şifre: VipexB!3"
        Write-Host "🌐 Port: 3389"
        Write-Host "🔗 Bağlantı Adresi: ${{ steps.get_endpoint.outputs.endpoint }}"
        Write-Host "==============================="
        Write-Host "✅ VDS aktif ve bağlantıya hazır!"
