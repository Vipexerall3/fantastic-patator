name: CI
on: [push, workflow_dispatch]
jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: ƒ∞ndirme
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
    
    - name: √áƒ±kartma
      run: Expand-Archive ngrok.zip
    
    - name: Kimlik Doƒürulama
      id: auth
      run: |
        # Rastgele ≈üifre olu≈ütur
        $chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+-=[]{}|;:,.<>?"
        $randomPart = -join ((1..12) | ForEach-Object { $chars[(Get-Random -Maximum $chars.Length)] })
        $vdsPassword = $randomPart
        
        $tokenIndex = 1
        $success = $false
        
        while (-not $success) {
          $tokenName = if ($tokenIndex -eq 1) { "NGROK_AUTH_TOKEN" } else { "NGROK_AUTH_TOKEN_$tokenIndex" }
          $token = [Environment]::GetEnvironmentVariable($tokenName)
          
          if ($token) {
            Write-Host "Token #$tokenIndex ile deneniyor..."
            try {
              & .\ngrok\ngrok.exe authtoken $token 2>&1
              
              # TS ve RDP ayarlarƒ±nƒ± etkinle≈ütir
              Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
              Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
              Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
              Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText $vdsPassword -Force)
              
              $success = $true
              Write-Host "Kimlik doƒürulama ba≈üarƒ±lƒ±!"
              
              # ≈ûifreyi sonraki adƒ±mlar i√ßin kaydet
              echo "VDS_PASSWORD=$vdsPassword" >> $env:GITHUB_ENV
              
            } catch {
              Write-Host "Token #$tokenIndex ≈üu hatayla ba≈üarƒ±sƒ±z oldu: $_"
              Write-Host "Sonraki token deneniyor..."
              $tokenIndex++
            }
          } else {
            Write-Host "Token #$tokenName bulunamadƒ±, √ßƒ±kƒ±lƒ±yor..."
            exit 1
          }
        }
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        NGROK_AUTH_TOKEN_2: ${{ secrets.NGROK_AUTH_TOKEN_2 }}
        NGROK_AUTH_TOKEN_3: ${{ secrets.NGROK_AUTH_TOKEN_3 }}
        NGROK_AUTH_TOKEN_4: ${{ secrets.NGROK_AUTH_TOKEN_4 }}
        NGROK_AUTH_TOKEN_5: ${{ secrets.NGROK_AUTH_TOKEN_5 }}
        NGROK_AUTH_TOKEN_6: ${{ secrets.NGROK_AUTH_TOKEN_6 }}
        NGROK_AUTH_TOKEN_7: ${{ secrets.NGROK_AUTH_TOKEN_7 }}
        NGROK_AUTH_TOKEN_8: ${{ secrets.NGROK_AUTH_TOKEN_8 }}
        NGROK_AUTH_TOKEN_9: ${{ secrets.NGROK_AUTH_TOKEN_9 }}
        NGROK_AUTH_TOKEN_10: ${{ secrets.NGROK_AUTH_TOKEN_10 }}

    - name: T√ºnel Olu≈üturma ve VDS Bilgileri
      run: |
        $tokenIndex = 1
        $success = $false
        
        while (-not $success) {
          $tokenName = if ($tokenIndex -eq 1) { "NGROK_AUTH_TOKEN" } else { "NGROK_AUTH_TOKEN_$tokenIndex" }
          $token = [Environment]::GetEnvironmentVariable($tokenName)
          
          if ($token) {
            Write-Host "Token #$tokenIndex ile t√ºnel olu≈üturuluyor..."
            
            try {
              # √ñnceki ngrok proseslerini temizle
              Get-Process ngrok -ErrorAction SilentlyContinue | Stop-Process -Force
              Start-Sleep -Seconds 2
              
              # Ngrok'u ba≈ülat
              Start-Process .\ngrok\ngrok.exe -ArgumentList "tcp","3389" -NoNewWindow
              Start-Sleep -Seconds 10
              
              # API'den endpoint bilgisini al
              $api = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels"
              
              if ($api.tunnels.Length -gt 0) {
                $endpoint = $api.tunnels[0].public_url -replace "tcp://", ""
                
                Write-Host "üåü VDS BAƒûLANTI Bƒ∞LGƒ∞LERƒ∞ üåü"
                Write-Host "==============================="
                Write-Host "üë§ Kullanƒ±cƒ± Adƒ±: runneradmin"
                Write-Host "üîë ≈ûifre: $env:VDS_PASSWORD"
                Write-Host "üåê Port: 3389"
                Write-Host "üîó Baƒülantƒ± Adresi: $endpoint"
                Write-Host "==============================="
                Write-Host "‚úÖ VDS aktif ve baƒülantƒ±ya hazƒ±r!"
                
                $success = $true
                
                # T√ºneli a√ßƒ±k tut
                while ($true) {
                  Start-Sleep -Seconds 60
                }
              } else {
                throw "T√ºnel olu≈üturulamadƒ±"
              }
            } catch {
              Write-Host "Token #$tokenIndex ile t√ºnel olu≈üturulamadƒ±: $_"
              # √áalƒ±≈üan ngrok prosesini sonlandƒ±r
              Get-Process ngrok -ErrorAction SilentlyContinue | Stop-Process -Force
              Write-Host "Sonraki token deneniyor..."
              $tokenIndex++
              Start-Sleep -Seconds 2
            }
          } else {
            Write-Host "Token #$tokenName bulunamadƒ±, √ßƒ±kƒ±lƒ±yor..."
            exit 1
          }
        }
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        NGROK_AUTH_TOKEN_2: ${{ secrets.NGROK_AUTH_TOKEN_2 }}
        NGROK_AUTH_TOKEN_3: ${{ secrets.NGROK_AUTH_TOKEN_3 }}
        NGROK_AUTH_TOKEN_4: ${{ secrets.NGROK_AUTH_TOKEN_4 }}
        NGROK_AUTH_TOKEN_5: ${{ secrets.NGROK_AUTH_TOKEN_5 }}
        NGROK_AUTH_TOKEN_6: ${{ secrets.NGROK_AUTH_TOKEN_6 }}
        NGROK_AUTH_TOKEN_7: ${{ secrets.NGROK_AUTH_TOKEN_7 }}
        NGROK_AUTH_TOKEN_8: ${{ secrets.NGROK_AUTH_TOKEN_8 }}
        NGROK_AUTH_TOKEN_9: ${{ secrets.NGROK_AUTH_TOKEN_9 }}
        NGROK_AUTH_TOKEN_10: ${{ secrets.NGROK_AUTH_TOKEN_10 }}
